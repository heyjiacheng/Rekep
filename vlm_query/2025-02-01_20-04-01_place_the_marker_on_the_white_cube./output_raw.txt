```python
# The task "Place the marker on the white cube" involves the following stages:
# 1. Grasp the marker.
# 2. Position the marker above the white cube.
# 3. Place the marker on the white cube.

num_stages = 3

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the marker."""
    marker_position = keypoints[4]
    cost = np.linalg.norm(end_effector - marker_position)
    return cost

### stage 1 path constraints
# No path constraints needed for grasping.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Position the marker 10cm above the white cube."""
    cube_top_position = keypoints[5] + np.array([0, 0, 0.1])
    marker_position = keypoints[4]
    cost = np.linalg.norm(marker_position - cube_top_position)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the marker."""
    return get_grasping_cost_by_keypoint_idx(4)

### stage 3 sub-goal constraints
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Place the marker on the white cube."""
    cube_top_position = keypoints[5]
    marker_position = keypoints[4]
    cost = np.linalg.norm(marker_position - cube_top_position)
    return cost

### stage 3 path constraints
def stage3_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the marker."""
    return get_grasping_cost_by_keypoint_idx(4)

# Summarize keypoints to be grasped in all grasping stages.
grasp_keypoints = [4, -1, -1]

# Summarize at the end of which stage the robot should release the keypoints.
release_keypoints = [-1, -1, 4]
```